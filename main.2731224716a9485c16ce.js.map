{"version":3,"sources":["webpack:///./template/template.hbs","webpack:///./load/template.js","webpack:///./load/timer.js"],"names":["Handlebars","module","exports","template","container","depth0","helpers","partials","data","refs","markupTimer","document","querySelector","markup","timer","insertAdjacentHTML","selector","targetDate","this","days","hours","mins","secs","initializeClock","getTimeRemaining","t","Math","floor","addition","value","String","padStart","endTime","setInterval","currentTime","Date","now","timeInterval","clearInterval","showTimer","updateClock","textContent"],"mappings":"gFAAA,IAAIA,EAAa,EAAQ,QAEzBC,EAAOC,SAAWF,EAAoB,SAAKA,GAAYG,SAAS,CAAC,SAAW,CAAC,EAAE,YAAY,KAAO,SAASC,EAAUC,EAAOC,EAAQC,EAASC,GACzI,MAAO,oiBACT,SAAU,K,mGCANC,EAAO,CACXC,YAAaC,SAASC,cAAc,aAGhCC,EAASC,MAEfL,EAAKC,YAAYK,mBAAmB,YAAaF,G,UC2CjD,I,WAlDE,cAAsC,IAAxBG,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,EAClBC,KAAKT,KAAO,CACVU,KAAMR,SAASC,cAAc,uBAC7BQ,MAAOT,SAASC,cAAc,wBAC9BS,KAAMV,SAASC,cAAc,uBAC7BU,KAAMX,SAASC,cAAc,wBAE/BM,KAAKK,kB,2BAEPC,iBAAA,SAAiBC,GASf,MAAO,CAAEN,KARIO,KAAKC,MAAMF,EAAI,OAQbL,MAPDF,KAAKU,SACjBF,KAAKC,MAAOF,EAAI,MAAL,OAMSJ,KAJTH,KAAKU,SAChBF,KAAKC,MAAOF,EAAI,KAAL,MAGeH,KADfJ,KAAKU,SAASF,KAAKC,MAAOF,EAAI,IAAe,Q,EAI5DG,SAAA,SAASC,GACP,OAAOC,OAAOD,GAAOE,SAAS,EAAG,M,EAEnCR,gBAAA,WAAkB,WACVS,EAAUd,KAAKD,WACHgB,aAAY,WAC5B,IAAMC,EAAcC,KAAKC,MACzB,EAAKC,aAAeL,EAAUE,EAC1B,EAAKG,cAAgB,EACvBC,cAAc,EAAKC,WAGrB,EAAKC,YAAY,EAAKH,gBACrB,M,EAELG,YAAA,WAAc,MACwBtB,KAAKM,iBACvCN,KAAKmB,cADClB,EADI,EACJA,KAAMC,EADF,EACEA,MAAOC,EADT,EACSA,KAAMC,EADf,EACeA,KAI3BJ,KAAKT,KAAKU,KAAKsB,YAAf,GAAgCtB,EAChCD,KAAKT,KAAKW,MAAMqB,YAAhB,GAAiCrB,EACjCF,KAAKT,KAAKY,KAAKoB,YAAf,GAAgCpB,EAChCH,KAAKT,KAAKa,KAAKmB,YAAf,GAAgCnB,G,KAIpC,CAAmB,CACjBN,SAAU,WACVC,WAAY,IAAIkB,KAAK,oB","file":"main.2731224716a9485c16ce.js","sourcesContent":["var Handlebars = require(\"../../node_modules/handlebars/runtime.js\");\nfunction __default(obj) { return obj && (obj.__esModule ? obj[\"default\"] : obj); }\nmodule.exports = (Handlebars[\"default\"] || Handlebars).template({\"compiler\":[8,\">= 4.3.0\"],\"main\":function(container,depth0,helpers,partials,data) {\n    return \"  <div class=\\\"field\\\">\\r\\n    <span class=\\\"value\\\" data-value=\\\"days\\\">00</span>\\r\\n    <span class=\\\"label\\\">Days</span>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"field\\\">\\r\\n    <span class=\\\"value\\\" data-value=\\\"hours\\\">00</span>\\r\\n    <span class=\\\"label\\\">Hours</span>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"field\\\">\\r\\n    <span class=\\\"value\\\" data-value=\\\"mins\\\">00</span>\\r\\n    <span class=\\\"label\\\">Minutes</span>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"field\\\">\\r\\n    <span class=\\\"value\\\" data-value=\\\"secs\\\">00</span>\\r\\n    <span class=\\\"label\\\">Seconds</span>\\r\\n  </div>\\r\\n\";\n},\"useData\":true});","`use strict`;\r\n\r\nimport timer from '../template/template.hbs';\r\n\r\nconst refs = {\r\n  markupTimer: document.querySelector('#timer-1'),\r\n};\r\n\r\nconst markup = timer();\r\n\r\nrefs.markupTimer.insertAdjacentHTML('beforeend', markup);\r\n","`use strict`;\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n    this.refs = {\r\n      days: document.querySelector('[data-value=\"days\"]'),\r\n      hours: document.querySelector('[data-value=\"hours\"]'),\r\n      mins: document.querySelector('[data-value=\"mins\"]'),\r\n      secs: document.querySelector('[data-value=\"secs\"]'),\r\n    };\r\n    this.initializeClock();\r\n  }\r\n  getTimeRemaining(t) {\r\n    const days = Math.floor(t / (1000 * 60 * 60 * 24));\r\n    const hours = this.addition(\r\n      Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.addition(\r\n      Math.floor((t % (1000 * 60 * 60)) / (1000 * 60)),\r\n    );\r\n    const secs = this.addition(Math.floor((t % (1000 * 60)) / 1000));\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  addition(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n  initializeClock() {\r\n    const endTime = this.targetDate;\r\n    const showTimer = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      this.timeInterval = endTime - currentTime;\r\n      if (this.timeInterval <= 0) {\r\n        clearInterval(this.showTimer);\r\n        return;\r\n      }\r\n      this.updateClock(this.timeInterval);\r\n    }, 1000);\r\n  }\r\n  updateClock() {\r\n    const { days, hours, mins, secs } = this.getTimeRemaining(\r\n      this.timeInterval,\r\n    );\r\n\r\n    this.refs.days.textContent = `${days}`;\r\n    this.refs.hours.textContent = `${hours}`;\r\n    this.refs.mins.textContent = `${mins}`;\r\n    this.refs.secs.textContent = `${secs}`;\r\n  }\r\n}\r\n\r\nnew CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Jul 17, 2020'),\r\n});\r\n"],"sourceRoot":""}